plugins {
    id 'multiloader-loader'
    id 'fabric-loom'
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings loom.layered {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${parchment_minecraft}:${parchment_version}@zip")
    }
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"

    modCompileOnly("maven.modrinth:biomes-o-plenty:${biomes_o_plenty_version}-fabric")
    modCompileOnly("maven.modrinth:terrablender:${terrablender_version}-fabric")
    modCompileOnly("maven.modrinth:glitchcore:${glitchcore_version}-fabric")
    compileOnly("com.electronwill.night-config:toml:${night_config_version}")
    compileOnly("com.electronwill.night-config:core:${night_config_version}")
    compileOnly("net.jodah:typetools:${typetools_version}")
    modCompileOnly("maven.modrinth:nemos-mossy-blocks:${nemos_mossy_blocks_version}-fabric")
    modCompileOnly("maven.modrinth:nemos-vertical-slabs:${nemos_vertical_slabs_version}-fabric")
}

fabricApi {
    configureDataGeneration()
}

base {
    archivesName = "${mod_id_jar}-Fabric"
}

repositories {
    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        filter {
            includeGroup "maven.modrinth"
        }
    }
}

loom {
    def aw = project(':common').file("src/main/resources/${mod_id}.accesswidener")
    if (aw.exists()) {
        accessWidenerPath.set(aw)
    }
    mixin {
        defaultRefmapName.set("${mod_id}.refmap.json")
    }
    runs {
        client {
            client()
            setConfigName('Fabric Client')
            ideConfigGenerated(true)
            runDir('runs/client')
        }
        server {
            server()
            setConfigName('Fabric Server')
            ideConfigGenerated(true)
            runDir('runs/server')
        }
        datagen {
            inherit client
            name "Data Generation"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${project(':common').file('src/generated/resources/')}"
            vmArg "-Dfabric-api.datagen.modid=${mod_id}"

            runDir "build/datagen"
        }
    }
}

sourceSets.main.resources { srcDir project.project(':common').file('src/generated/resources/').getAbsolutePath() }